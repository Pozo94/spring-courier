/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pl.com.gymtech.courierspring.api;

import pl.com.gymtech.courierspring.entity.CustomerDomain;
import pl.com.gymtech.courierspring.model.Customer;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-16T10:08:20.752442600+02:00[Europe/Warsaw]")
@Validated
@Api(value = "customers", description = "the customers API")
public interface CustomersApi {

    default CustomersApiDelegate getDelegate() {
        return new CustomersApiDelegate() {};
    }

    /**
     * GET /customers : Pobierz wszystkich klientów
     *
     * @return Lista klientów (status code 200)
     */
    @ApiOperation(value = "Pobierz wszystkich klientów", nickname = "customersGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Lista klientów") })
    @GetMapping(
        value = "/customers"
    )
    default ResponseEntity<List<CustomerDomain>> customersGet() {
        return getDelegate().customersGet();
    }


    /**
     * DELETE /customers/{id} : Usuń klienta o określonym identyfikatorze
     *
     * @param id Identyfikator klienta do usunięcia (required)
     * @return Klient został usunięty (status code 204)
     *         or Nie znaleziono klienta o podanym identyfikatorze (status code 404)
     */
    @ApiOperation(value = "Usuń klienta o określonym identyfikatorze", nickname = "customersIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Klient został usunięty"),
        @ApiResponse(code = 404, message = "Nie znaleziono klienta o podanym identyfikatorze") })
    @DeleteMapping(
        value = "/customers/{id}"
    )
    default ResponseEntity<Void> customersIdDelete(@ApiParam(value = "Identyfikator klienta do usunięcia",required=true) @PathVariable("id") Long id) {
        return getDelegate().customersIdDelete(id);
    }


    /**
     * GET /customers/{id} : Pobierz klienta o określonym identyfikatorze
     *
     * @param id Identyfikator klienta do pobrania (required)
     * @return Szczegóły klienta (status code 200)
     *         or Nie znaleziono (status code 404)
     */
    @ApiOperation(value = "Pobierz klienta o określonym identyfikatorze", nickname = "customersIdGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Szczegóły klienta"),
        @ApiResponse(code = 404, message = "Nie znaleziono") })
    @GetMapping(
        value = "/customers/{id}"
    )
    default ResponseEntity<Void> customersIdGet(@ApiParam(value = "Identyfikator klienta do pobrania",required=true) @PathVariable("id") Long id) {
        return getDelegate().customersIdGet(id);
    }


    /**
     * GET /customers/{id}/orders : Pobierz wszystkie zamówienia użytkownika
     *
     * @param id Identyfikator użytkownika (required)
     * @return OK (status code 200)
     *         or Nie znaleziono klienta o podanym identyfikatorze (status code 404)
     */
    @ApiOperation(value = "Pobierz wszystkie zamówienia użytkownika", nickname = "customersIdOrdersGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Nie znaleziono klienta o podanym identyfikatorze") })
    @GetMapping(
        value = "/customers/{id}/orders"
    )
    default ResponseEntity<CustomerDomain> customersIdOrdersGet(@ApiParam(value = "Identyfikator użytkownika",required=true) @PathVariable("id") Integer id) {
        return getDelegate().customersIdOrdersGet(id);
    }


    /**
     * PUT /customers/{id} : Zaktualizuj adres o określonym identyfikatorze
     *
     * @param id Identyfikator adresu do zaktualizowania (required)
     * @param customer  (required)
     * @return Klient został zaktualizowany (status code 200)
     *         or Nie znaleziono klienta o podanym identyfikatorze (status code 404)
     */
    @ApiOperation(value = "Zaktualizuj adres o określonym identyfikatorze", nickname = "customersIdPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Klient został zaktualizowany"),
        @ApiResponse(code = 404, message = "Nie znaleziono klienta o podanym identyfikatorze") })
    @PutMapping(
        value = "/customers/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> customersIdPut(@ApiParam(value = "Identyfikator adresu do zaktualizowania",required=true) @PathVariable("id") Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Customer customer) {
        return getDelegate().customersIdPut(id, customer);
    }


    /**
     * POST /customers : Dodaj nowego klienta
     *
     * @param customer  (required)
     * @return Klient został dodany (status code 201)
     */
    @ApiOperation(value = "Dodaj nowego klienta", nickname = "customersPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Klient został dodany") })
    @PostMapping(
        value = "/customers",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> customersPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Customer customer) {
        return getDelegate().customersPost(customer);
    }

}
