/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pl.com.gymtech.courierspring.api;

import pl.com.gymtech.courierspring.entity.DriverDomain;
import pl.com.gymtech.courierspring.model.Driver;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-16T10:08:20.752442600+02:00[Europe/Warsaw]")
@Validated
@Api(value = "drivers", description = "the drivers API")
public interface DriversApi {

    default DriversApiDelegate getDelegate() {
        return new DriversApiDelegate() {};
    }

    /**
     * GET /drivers : Pobierz wszystkich kierowców
     *
     * @return Lista wszystkich kierowców (status code 200)
     */
    @ApiOperation(value = "Pobierz wszystkich kierowców", nickname = "driversGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Lista wszystkich kierowców") })
    @GetMapping(
        value = "/drivers"
    )
    default ResponseEntity<List<DriverDomain>> driversGet() {
        return getDelegate().driversGet();
    }


    /**
     * DELETE /drivers/{id} : Usuń kierowcę o określonym identyfikatorze
     *
     * @param id Identyfikator kierowcy (required)
     * @return Kierowca został usunięty (status code 204)
     *         or Kierowca o podanym identyfikatorze nie istnieje (status code 404)
     */
    @ApiOperation(value = "Usuń kierowcę o określonym identyfikatorze", nickname = "driversIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Kierowca został usunięty"),
        @ApiResponse(code = 404, message = "Kierowca o podanym identyfikatorze nie istnieje") })
    @DeleteMapping(
        value = "/drivers/{id}"
    )
    default ResponseEntity<Void> driversIdDelete(@ApiParam(value = "Identyfikator kierowcy",required=true) @PathVariable("id") Integer id) {
        return getDelegate().driversIdDelete(id);
    }


    /**
     * GET /drivers/{id} : Pobierz kierowcę o określonym identyfikatorze
     *
     * @param id Identyfikator kierowcy (required)
     * @return Szczegóły kierowcy (status code 200)
     * or Kierowca o podanym identyfikatorze nie istnieje (status code 404)
     */
    @ApiOperation(value = "Pobierz kierowcę o określonym identyfikatorze", nickname = "driversIdGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Szczegóły kierowcy"),
        @ApiResponse(code = 404, message = "Kierowca o podanym identyfikatorze nie istnieje") })
    @GetMapping(
        value = "/drivers/{id}"
    )
    default ResponseEntity<DriverDomain> driversIdGet(@ApiParam(value = "Identyfikator kierowcy",required=true) @PathVariable("id") Integer id) {
        return getDelegate().driversIdGet(id);
    }


    /**
     * PUT /drivers/{id} : Zaktualizuj kierowcę o określonym identyfikatorze
     *
     * @param id Identyfikator kierowcy (required)
     * @param driver  (required)
     * @return Kierowca został zaktualizowany (status code 200)
     *         or Nieprawidłowe dane kierowcy (status code 400)
     *         or Kierowca o podanym identyfikatorze nie istnieje (status code 404)
     */
    @ApiOperation(value = "Zaktualizuj kierowcę o określonym identyfikatorze", nickname = "driversIdPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Kierowca został zaktualizowany"),
        @ApiResponse(code = 400, message = "Nieprawidłowe dane kierowcy"),
        @ApiResponse(code = 404, message = "Kierowca o podanym identyfikatorze nie istnieje") })
    @PutMapping(
        value = "/drivers/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> driversIdPut(@ApiParam(value = "Identyfikator kierowcy",required=true) @PathVariable("id") Integer id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Driver driver) {
        return getDelegate().driversIdPut(id, driver);
    }


    /**
     * POST /drivers : Dodaj nowego kierowcę
     *
     * @param order  (required)
     * @return Kierowca został dodany (status code 201)
     *         or Nieprawidłowe dane kierowcy (status code 400)
     */
    @ApiOperation(value = "Dodaj nowego kierowcę", nickname = "driversPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Kierowca został dodany"),
        @ApiResponse(code = 400, message = "Nieprawidłowe dane kierowcy") })
    @PostMapping(
        value = "/drivers",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> driversPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Driver driver) {
        return getDelegate().driversPost(driver);
    }

}
