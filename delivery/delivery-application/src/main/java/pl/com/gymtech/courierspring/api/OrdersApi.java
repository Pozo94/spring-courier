/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pl.com.gymtech.courierspring.api;

import pl.com.gymtech.courierspring.entity.OrderDomain;
import pl.com.gymtech.courierspring.entity.ShipmentDomain;
import pl.com.gymtech.courierspring.model.Order;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-16T10:08:20.752442600+02:00[Europe/Warsaw]")
@Validated
@Api(value = "orders", description = "the orders API")
public interface OrdersApi {

    default OrdersApiDelegate getDelegate() {
        return new OrdersApiDelegate() {};
    }

    /**
     * GET /orders : Pobierz wszystkie zamówienia
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Pobierz wszystkie zamówienia", nickname = "ordersGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @GetMapping(
        value = "/orders"
    )
    default ResponseEntity<List<OrderDomain>> ordersGet() {
        return getDelegate().ordersGet();
    }


    /**
     * DELETE /orders/{id} : Usuń zamówienie o określonym identyfikatorze
     *
     * @param id Identyfikator zamówienia (required)
     * @return Usunięto (status code 204)
     *         or Nie znaleziono zamówienia o podanym identyfikatorze (status code 404)
     */
    @ApiOperation(value = "Usuń zamówienie o określonym identyfikatorze", nickname = "ordersIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Usunięto"),
        @ApiResponse(code = 404, message = "Nie znaleziono zamówienia o podanym identyfikatorze") })
    @DeleteMapping(
        value = "/orders/{id}"
    )
    default ResponseEntity<Void> ordersIdDelete(@ApiParam(value = "Identyfikator zamówienia",required=true) @PathVariable("id") Integer id) {
        return getDelegate().ordersIdDelete(id);
    }


    /**
     * GET /orders/{id} : Pobierz zamówienie o określonym identyfikatorze
     *
     * @param id Identyfikator zamówienia (required)
     * @return OK (status code 200)
     * or Nie znaleziono zamówienia o podanym identyfikatorze (status code 404)
     */
    @ApiOperation(value = "Pobierz zamówienie o określonym identyfikatorze", nickname = "ordersIdGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Nie znaleziono zamówienia o podanym identyfikatorze") })
    @GetMapping(
        value = "/orders/{id}"
    )
    default ResponseEntity<OrderDomain> ordersIdGet(@ApiParam(value = "Identyfikator zamówienia",required=true) @PathVariable("id") Integer id) {
        return getDelegate().ordersIdGet(id);
    }


    /**
     * PUT /orders/{id} : Zaktualizuj zamówienie o określonym identyfikatorze
     *
     * @param id Identyfikator zamówienia (required)
     * @param order  (required)
     * @return OK (status code 200)
     *         or Nie znaleziono zamówienia o podanym identyfikatorze (status code 404)
     */
    @ApiOperation(value = "Zaktualizuj zamówienie o określonym identyfikatorze", nickname = "ordersIdPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Nie znaleziono zamówienia o podanym identyfikatorze") })
    @PutMapping(
        value = "/orders/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> ordersIdPut(@ApiParam(value = "Identyfikator zamówienia",required=true) @PathVariable("id") Integer id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Order order) {
        return getDelegate().ordersIdPut(id, order);
    }


    /**
     * GET /orders/{orderId}/shipment : Śledzenie przesyłki zamówienia o określonym identyfikatorze
     *
     * @param orderId Identyfikator zamówienia (required)
     * @return Szczegóły przesyłki (status code 200)
     * or Zamówienie o podanym identyfikatorze nie istnieje (status code 404)
     */
    @ApiOperation(value = "Śledzenie przesyłki zamówienia o określonym identyfikatorze", nickname = "ordersOrderIdShipmentGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Szczegóły przesyłki"),
        @ApiResponse(code = 404, message = "Zamówienie o podanym identyfikatorze nie istnieje") })
    @GetMapping(
        value = "/orders/{orderId}/shipment"
    )
    default ResponseEntity<ShipmentDomain> ordersOrderIdShipmentGet(@ApiParam(value = "Identyfikator zamówienia",required=true) @PathVariable("orderId") Integer orderId) {
        return getDelegate().ordersOrderIdShipmentGet(orderId);
    }


    /**
     * PUT /orders/{orderId}/shipment : Aktualizuj dane przesyłki zamówienia
     *
     * @param orderId Identyfikator zamówienia (required)
     * @return Szczegóły przesyłki (status code 200)
     *         or Zamówienie o podanym identyfikatorze nie istnieje (status code 404)
     */
    @ApiOperation(value = "Aktualizuj dane przesyłki zamówienia", nickname = "ordersOrderIdShipmentPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Szczegóły przesyłki"),
        @ApiResponse(code = 404, message = "Zamówienie o podanym identyfikatorze nie istnieje") })
    @PutMapping(
        value = "/orders/{orderId}/shipment"
    )
    default ResponseEntity<Void> ordersOrderIdShipmentPut(@ApiParam(value = "Identyfikator zamówienia",required=true) @PathVariable("orderId") Integer orderId) {
        return getDelegate().ordersOrderIdShipmentPut(orderId);
    }


    /**
     * POST /orders : Dodaj nowe zamówienie
     *
     * @param order  (required)
     * @return Stworzono (status code 201)
     */
    @ApiOperation(value = "Dodaj nowe zamówienie", nickname = "ordersPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Stworzono") })
    @PostMapping(
        value = "/orders",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> ordersPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Order order) {
        return getDelegate().ordersPost(order);
    }

}
